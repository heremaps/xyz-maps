/*
 * Copyright (C) 2019-2022 HERE Europe B.V.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * SPDX-License-Identifier: Apache-2.0
 * License-Filename: LICENSE
 */

import {CustomLayer, Feature, TileLayer} from '@here/xyz-maps-core';

let UNDEF;

/**
 * The MapEvent represents an event which takes place in the map.
 * An event can be triggered by user interaction e.g. tapping on the map, or being generated to represent the progress of an asynchronous task.
 */
class MapEvent {
    /**
     * The underlying native Mouse-, Pointer- or Touch-event generated by the browser.
     * This property will be null if the Event was not directly generated from a native event.
     */
    readonly nativeEvent?: MouseEvent | TouchEvent | PointerEvent | null;

    /**
     * The type of the event.
     * Supported events: "mapviewchangestart", "mapviewchange", "mapviewchangeend", "resize",
     * "tap", "dbltap", "pointerup", "pointerenter", "pointerleave", "pointerdown", "pointermove", "pressmove"
     */
    readonly type: string;

    /**
     * This property specifies the time at which the event was created in milliseconds relative to 1970-01-01T00:00:00Z.
     */
    readonly timeStamp: number;

    /**
     * The feature on the map this event relates to.
     * e.g. User clicks/taps on a specific Feature on the map.
     * If the event does not refer to any feature, the property is null.
     */
    readonly target?: Feature | null;
    /**
     * This property indicates which button was pressed on the mouse to trigger the event.
     *
     * Possible values:
     * - 0: Main button pressed, usually the left button or the un-initialized state
     * - 2: Secondary button pressed, usually the right button
     *
     * @defaultValue 0
     */
    readonly button: number;
    /**
     * Gives the x coordinate relative to the map container HTMLElement in pixels.
     * This property is only set when created by user interaction with native mouse/touch/pointer events.
     */
    readonly mapX?: number;
    /**
     * Gives the y coordinate relative to the map container HTMLElement in pixels.
     * This property is only set when created by user interaction with native mouse/touch/pointer events.
     */
    readonly mapY?: number;

    /**
     * optional event detail data
     */
    readonly detail?: {
        [detail: string]: any;
        /**
         * If the event was triggered as a result of user interaction (e.g., clicking or hovering),
         * and the source of the event is a layer-based object, this property refers to the associated
         * `TileLayer` or `CustomLayer` instance from which the event originated.
         *
         * Useful for identifying which data layer was interacted with, especially when multiple layers are active.
         */
        layer?: TileLayer | CustomLayer
    };
    data?: any;


    constructor(
        type: string,
        detail?: any,
        nativeEvent?: MouseEvent | TouchEvent | PointerEvent,
        mapX?: number,
        mapY?: number
    ) {
        this.type = type;
        this.timeStamp = Date.now();

        if (detail != UNDEF) {
            this.data =
                this.detail = detail;
        }

        if (nativeEvent) {
            this.mapX = mapX;
            this.mapY = mapY;
            this.nativeEvent = nativeEvent;
            this.button = (<MouseEvent>nativeEvent).button;
        }
    }

    stopPropagation() {
        const ev = this.nativeEvent;
        // make sure move are not received by map pan handler in any case..
        if (ev.type == 'mousemove' || ev.type == 'touchmove') {
            ev.stopImmediatePropagation();
            // disable's (ios)browser's  "page-scroll"/"pinch to zoom"...
            return ev.preventDefault();
        }
        // up/down events need to pass..
        // return ev.stopPropagation()
    };

    toString() {
        return 'MapEvent ' + this.type;
    };
}


export {MapEvent};
